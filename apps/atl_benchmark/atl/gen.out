COQDEP VFILES
COQC GenLib.v
"!!!\nconcattest1.h\n#include <stdlib.h>\n\nvoid concattest1(float* l,int m,int n,float*output);\n!!!\nconcattest1.c\n#include <stdlib.h>\n#include @concattest1.h@\n\nvoid concattest1(float* l,int m,int n,float*output){\nfor (int H14 = 0; H14 < 1; H14++) {\nfor (int H15 = 0; H15 < n; H15++) {\noutput[((1 + (m - (1)))) * (H15) + H14] = l[(((m)) * (H15)) + H14];\n}\n}\nfor (int H16 = 1; H16 < m; H16++) {\nfor (int H25 = 0; H25 < 1; H25++) {\noutput[((1 + (m - (1)))) * (H25) + ((H16 - (1)) + 1)] = l[(((m)) * (H25)) + H16];\n}\nfor (int H26 = 1; H26 < n - (1); H26++) {\noutput[((1 + (m - (1)))) * (((H26 - (1)) + 1)) + ((H16 - (1)) + 1)] = l[(((m)) * (H26)) + H16];\n}\nfor (int H27 = n - (1); H27 < n; H27++) {\noutput[((1 + (m - (1)))) * (((H27 - (n - (1))) + (1 + (n - (1) - (1))))) + ((H16 - (1)) + 1)] = l[(((m)) * (H27)) + H16];\n}\n}\n}\n"
"!!!\nconcattest0.h\n#include <stdlib.h>\n\nvoid concattest0(float* l,int m,int n,float*output);\n!!!\nconcattest0.c\n#include <stdlib.h>\n#include @concattest0.h@\n\nvoid concattest0(float* l,int m,int n,float*output){\nfor (int H10 = 0; H10 < 1; H10++) {\nfor (int H11 = 0; H11 < n; H11++) {\noutput[((1 + (m - (1)))) * (H11) + H10] = l[(((m)) * (H11)) + H10];\n}\n}\nfor (int H12 = 1; H12 < m; H12++) {\nfor (int H13 = 0; H13 < n; H13++) {\noutput[((1 + (m - (1)))) * (H13) + ((H12 - (1)) + 1)] = l[(((m)) * (H13)) + H12];\n}\n}\n}\n"
"!!!\nconcattest2.h\n#include <stdlib.h>\n\nvoid concattest2(float* v,int m,int n,float*output);\n!!!\nconcattest2.c\n#include <stdlib.h>\n#include @concattest2.h@\n\nvoid concattest2(float* v,int m,int n,float*output){\nfor (int H15 = 0; H15 < 1; H15++) {\nfor (int H19 = 0; H19 < 1; H19++) {\noutput[((1 + (m - (1)))) * (H19) + H15] = v[(((m)) * (H19)) + H15];\n}\nfor (int H20 = 1; H20 < n; H20++) {\noutput[((1 + (m - (1)))) * (((H20 - (1)) + 1)) + H15] = v[(((m)) * (H20)) + H15];\n}\n}\nfor (int H21 = 1; H21 < m; H21++) {\nfor (int H22 = 0; H22 < n; H22++) {\noutput[((1 + (m - (1)))) * (H22) + ((H21 - (1)) + 1)] = v[(((m)) * (H22)) + H21];\n}\n}\n}\n"
"!!!\nconcattest3.h\n#include <stdlib.h>\n\nvoid concattest3(float* l,int m,int n,float*output);\n!!!\nconcattest3.c\n#include <stdlib.h>\n#include @concattest3.h@\n\nvoid concattest3(float* l,int m,int n,float*output){\nfor (int H3 = 0; H3 < m; H3++) {\nfor (int H7 = 0; H7 < 1; H7++) {\noutput[(m) * (H7) + H3] = l[(((m)) * (H7)) + H3];\n}\nfor (int H8 = 1; H8 < n; H8++) {\noutput[(m) * (((H8 - (1)) + 1)) + H3] = l[(((m)) * (H8)) + H3];\n}\n}\n}\n"
"!!!\nconcattest4.h\n#include <stdlib.h>\n\nvoid concattest4(float* l,int m,int n,float*output);\n!!!\nconcattest4.c\n#include <stdlib.h>\n#include @concattest4.h@\n\nvoid concattest4(float* l,int m,int n,float*output){\nfor (int H10 = 0; H10 < 1; H10++) {\nfor (int H11 = 0; H11 < n; H11++) {\noutput[((1 + (m - (1)))) * (H11) + H10] = l[(H11) * (m) + H10];\n}\n}\nfor (int H12 = 1; H12 < m; H12++) {\nfor (int H13 = 0; H13 < n; H13++) {\noutput[((1 + (m - (1)))) * (H13) + ((H12 - (1)) + 1)] = l[(H13) * (m) + H12];\n}\n}\n}\n"
"!!!\nconcattest5.h\n#include <stdlib.h>\n\nvoid concattest5(float* v,int m,int n,float*output);\n!!!\nconcattest5.c\n#include <stdlib.h>\n#include @concattest5.h@\n\nvoid concattest5(float* v,int m,int n,float*output){\nfor (int H8 = 0; H8 < ((n) + (64) - 1 ) / (64); H8++) {\nfor (int H9 = 0; H9 < ((m) + (64) - 1 ) / (64); H9++) {\nfor (int H16 = 0; H16 < 1; H16++) {\nfor (int H17 = 0; H17 < 64; H17++) {\nif ((H9) * (64) + H17 < m) {\nif ((H8) * (64) + H16 < n) {\noutput[(m) * (((1 + (64 - (1)))) * (H8) + H16) + (64) * (H9) + H17] = v[(((m)) * ((H8) * (64) + H16)) + (H9) * (64) + H17];\n}\n}\n}\n}\nfor (int H18 = 1; H18 < 64; H18++) {\nfor (int H19 = 0; H19 < 64; H19++) {\nif ((H9) * (64) + H19 < m) {\nif ((H8) * (64) + H18 < n) {\noutput[(m) * (((1 + (64 - (1)))) * (H8) + ((H18 - (1)) + 1)) + (64) * (H9) + H19] = v[(((m)) * ((H8) * (64) + H18)) + (H9) * (64) + H19];\n}\n}\n}\n}\n}\n}\n}\n"
"!!!\nconv4.h\n#include <stdlib.h>\n\nvoid conv4(int m,int n,float* c,float*output);\n!!!\nconv4.c\n#include <stdlib.h>\n#include @conv4.h@\n\nvoid conv4(int m,int n,float* c,float*output){\nfor (int H3 = 0; H3 < n; H3++) {\nif (0 <= H3 - (2) && H3 - (2) < m) {\noutput[H3] = c[H3 - (2)];\n}\n}\n}\n"
"!!!\nconv1.h\n#include <stdlib.h>\n\nvoid conv1(int m,int n,float* c,float*output);\n!!!\nconv1.c\n#include <stdlib.h>\n#include @conv1.h@\n\nvoid conv1(int m,int n,float* c,float*output){\nfor (int H4 = 0; H4 < n; H4++) {\nfor (int H5 = 0; H5 < m; H5++) {\nfloat tmp2 = 0;\nif (0 <= H4 - (H5)) {\nfloat tmp3 = 0;\nfloat* tmp4 = (float*) calloc(1,((n - ((-(m)) + 1))) * sizeof (float));\nfor (int H9 = (-(m)) + 1; H9 < n; H9++) {\nif (H9 == 2 + (-(m)) + 1) {\ntmp4[(H9 - ((-(m)) + 1))] = 1;\n}\n}\ntmp3 = tmp4[H4 - (H5)];\nfree(tmp4);\nfloat tmp5 = 0;\ntmp5 = c[H5];\ntmp2 = tmp3 * tmp5;\n}\noutput[H4] = output[H4] + tmp2;\n}\n}\n}\n"
"!!!\nblurim.h\n#include <stdlib.h>\n\nvoid blurim(float* v,int M,int N,float*output);\n!!!\nblurim.c\n#include <stdlib.h>\n#include @blurim.h@\n\nvoid blurim(float* v,int M,int N,float*output){\nfor (int H4 = 0; H4 < N; H4++) {\nfor (int H5 = 0; H5 < M; H5++) {\nfloat tmp2 = 0;\nfloat tmp3 = 0;\nif (0 <= H4 - (1) && H4 - (1) < N) {\nfloat tmp4 = 0;\nfloat tmp5 = 0;\nif (0 <= H5 - (1)) {\ntmp5 = v[(((M)) * (H4 - (1))) + H5 - (1)];\n}\nfloat tmp6 = 0;\ntmp6 = v[(((M)) * (H4 - (1))) + H5];\ntmp4 = tmp5 + tmp6;\nfloat tmp7 = 0;\nif (H5 + 1 < M) {\ntmp7 = v[(((M)) * (H4 - (1))) + H5 + 1];\n}\ntmp3 = tmp4 + tmp7;\n}\nfloat tmp8 = 0;\nif (0 <= H4) {\nfloat tmp9 = 0;\nfloat tmp10 = 0;\nif (0 <= H5 - (1)) {\ntmp10 = v[(((M)) * (H4)) + H5 - (1)];\n}\nfloat tmp11 = 0;\ntmp11 = v[(((M)) * (H4)) + H5];\ntmp9 = tmp10 + tmp11;\nfloat tmp12 = 0;\nif (H5 + 1 < M) {\ntmp12 = v[(((M)) * (H4)) + H5 + 1];\n}\ntmp8 = tmp9 + tmp12;\n}\ntmp2 = tmp3 + tmp8;\nfloat tmp13 = 0;\nif (0 <= H4 + 1 && H4 + 1 < N) {\nfloat tmp14 = 0;\nfloat tmp15 = 0;\nif (0 <= H5 - (1)) {\ntmp15 = v[(((M)) * (H4 + 1)) + H5 - (1)];\n}\nfloat tmp16 = 0;\ntmp16 = v[(((M)) * (H4 + 1)) + H5];\ntmp14 = tmp15 + tmp16;\nfloat tmp17 = 0;\nif (H5 + 1 < M) {\ntmp17 = v[(((M)) * (H4 + 1)) + H5 + 1];\n}\ntmp13 = tmp14 + tmp17;\n}\noutput[(M) * (H4) + H5] = tmp2 + tmp13;\n}\n}\n}\n"
"!!!\nblurtwo.h\n#include <stdlib.h>\n\nvoid blurtwo(float* v,int M,int N,float*output);\n!!!\nblurtwo.c\n#include <stdlib.h>\n#include @blurtwo.h@\n\nvoid blurtwo(float* v,int M,int N,float*output){\nfloat* tmp2 = (float*) calloc(1,((N + 1 + 1 + 0)) * (M) * sizeof (float));\nfor (int H7 = 0; H7 < (N + 1 + 1 + 0); H7++) {\nfor (int H8 = 0; H8 < M; H8++) {\nif (0 <= H7 - (1) && H7 - (1) < N) {\nfloat tmp3 = 0;\nfloat tmp4 = 0;\nif (0 <= H8 - (1)) {\ntmp4 = v[(((M)) * (H7 - (1))) + H8 - (1)];\n}\nfloat tmp5 = 0;\ntmp5 = v[(((M)) * (H7 - (1))) + H8];\ntmp3 = tmp4 + tmp5;\nfloat tmp6 = 0;\nif (H8 + 1 < M) {\ntmp6 = v[(((M)) * (H7 - (1))) + H8 + 1];\n}\ntmp2[(M) * (H7) + H8] = tmp3 + tmp6;\n}\n}\n}\nfloat* x0 = tmp2;\nfor (int H10 = 0; H10 < N; H10++) {\nfor (int H11 = 0; H11 < M; H11++) {\nfloat tmp7 = 0;\nfloat tmp8 = 0;\ntmp8 = x0[(((M)) * (H10)) + H11];\nfloat tmp9 = 0;\ntmp9 = x0[(((M)) * (H10 + 1)) + H11];\ntmp7 = tmp8 + tmp9;\nfloat tmp10 = 0;\ntmp10 = x0[(((M)) * (H10 + 2)) + H11];\noutput[(M) * (H10) + H11] = tmp7 + tmp10;\n}\n}\nfree(tmp2);\n}\n"
"!!!\nblurtiles.h\n#include <stdlib.h>\n\nvoid blurtiles(float* l,int m,int n,float*output);\n!!!\nblurtiles.c\n#include <stdlib.h>\n#include @blurtiles.h@\n\nvoid blurtiles(float* l,int m,int n,float*output){\nfor (int H12 = 0; H12 < ((n) + (64) - 1 ) / (64); H12++) {\nfor (int H13 = 0; H13 < ((m) + (64) - 1 ) / (64); H13++) {\nfloat* tmp2 = (float*) calloc(1,(((1 + ((((66) < (n + 1 - ((H12) * (64)))) ? (66) : (n + 1 - ((H12) * (64)))) - (1))) + (66 - ((((66) < (n + 1 - ((H12) * (64)))) ? (66) : (n + 1 - ((H12) * (64)))))))) * (64) * sizeof (float));\nfor (int H44 = 0; H44 < 1; H44++) {\nfor (int H45 = 0; H45 < 64; H45++) {\nif ((H13) * (64) + H45 < m) {\nif (0 <= (H12) * (64) + H44 - (1) && (H12) * (64) + H44 - (1) < n) {\nfloat tmp3 = 0;\nfloat tmp4 = 0;\nif (0 <= (H13) * (64) + H45 - (1)) {\ntmp4 = l[(((m)) * ((H12) * (64) + H44 - (1))) + (H13) * (64) + H45 - (1)];\n}\nfloat tmp5 = 0;\ntmp5 = l[(((m)) * ((H12) * (64) + H44 - (1))) + (H13) * (64) + H45];\ntmp3 = tmp4 + tmp5;\nfloat tmp6 = 0;\nif ((H13) * (64) + H45 + 1 < m) {\ntmp6 = l[(((m)) * ((H12) * (64) + H44 - (1))) + (H13) * (64) + H45 + 1];\n}\ntmp2[(64) * (H44) + H45] = tmp3 + tmp6;\n}\n}\n}\n}\nfor (int H46 = 1; H46 < (((66) < (n + 1 - ((H12) * (64)))) ? (66) : (n + 1 - ((H12) * (64)))); H46++) {\nfor (int H55 = 0; H55 < 1; H55++) {\nif ((H13) * (64) + H55 < m) {\nfloat tmp7 = 0;\nfloat tmp8 = 0;\nif (0 <= (H13) * (64) + H55 - (1)) {\ntmp8 = l[(((m)) * ((H12) * (64) + H46 - (1))) + (H13) * (64) + H55 - (1)];\n}\nfloat tmp9 = 0;\ntmp9 = l[(((m)) * ((H12) * (64) + H46 - (1))) + (H13) * (64) + H55];\ntmp7 = tmp8 + tmp9;\nfloat tmp10 = 0;\nif ((H13) * (64) + H55 + 1 < m) {\ntmp10 = l[(((m)) * ((H12) * (64) + H46 - (1))) + (H13) * (64) + H55 + 1];\n}\ntmp2[(((1 + ((((64) < (m - (1) - ((H13) * (64)))) ? (64) : (m - (1) - ((H13) * (64)))) - (1))) + (64 - ((((64) < (m - (1) - ((H13) * (64)))) ? (64) : (m - (1) - ((H13) * (64)))))))) * (((H46 - (1)) + 1)) + H55] = tmp7 + tmp10;\n}\n}\nfor (int H56 = 1; H56 < (((64) < (m - (1) - ((H13) * (64)))) ? (64) : (m - (1) - ((H13) * (64)))); H56++) {\nfloat tmp11 = 0;\nfloat tmp12 = 0;\ntmp12 = l[(((m)) * ((H12) * (64) + H46 - (1))) + (H13) * (64) + H56 - (1)];\nfloat tmp13 = 0;\ntmp13 = l[(((m)) * ((H12) * (64) + H46 - (1))) + (H13) * (64) + H56];\ntmp11 = tmp12 + tmp13;\nfloat tmp14 = 0;\ntmp14 = l[(((m)) * ((H12) * (64) + H46 - (1))) + (H13) * (64) + H56 + 1];\ntmp2[(((1 + ((((64) < (m - (1) - ((H13) * (64)))) ? (64) : (m - (1) - ((H13) * (64)))) - (1))) + (64 - ((((64) < (m - (1) - ((H13) * (64)))) ? (64) : (m - (1) - ((H13) * (64)))))))) * (((H46 - (1)) + 1)) + ((H56 - (1)) + 1)] = tmp11 + tmp14;\n}\nfor (int H57 = (((64) < (m - (1) - ((H13) * (64)))) ? (64) : (m - (1) - ((H13) * (64)))); H57 < 64; H57++) {\nif ((H13) * (64) + H57 < m) {\nfloat tmp15 = 0;\nfloat tmp16 = 0;\ntmp16 = l[(((m)) * ((H12) * (64) + H46 - (1))) + (H13) * (64) + H57 - (1)];\nfloat tmp17 = 0;\ntmp17 = l[(((m)) * ((H12) * (64) + H46 - (1))) + (H13) * (64) + H57];\ntmp15 = tmp16 + tmp17;\nfloat tmp18 = 0;\nif ((H13) * (64) + H57 + 1 < m) {\ntmp18 = l[(((m)) * ((H12) * (64) + H46 - (1))) + (H13) * (64) + H57 + 1];\n}\ntmp2[(((1 + ((((64) < (m - (1) - ((H13) * (64)))) ? (64) : (m - (1) - ((H13) * (64)))) - (1))) + (64 - ((((64) < (m - (1) - ((H13) * (64)))) ? (64) : (m - (1) - ((H13) * (64)))))))) * (((H46 - (1)) + 1)) + ((H57 - ((((64) < (m - (1) - ((H13) * (64)))) ? (64) : (m - (1) - ((H13) * (64)))))) + (1 + ((((64) < (m - (1) - ((H13) * (64)))) ? (64) : (m - (1) - ((H13) * (64)))) - (1))))] = tmp15 + tmp18;\n}\n}\n}\nfor (int H58 = (((66) < (n + 1 - ((H12) * (64)))) ? (66) : (n + 1 - ((H12) * (64)))); H58 < 66; H58++) {\nfor (int H59 = 0; H59 < 64; H59++) {\nif ((H13) * (64) + H59 < m) {\nif ((H12) * (64) + H58 - (1) < n) {\nfloat tmp19 = 0;\nfloat tmp20 = 0;\nif (0 <= (H13) * (64) + H59 - (1)) {\ntmp20 = l[(((m)) * ((H12) * (64) + H58 - (1))) + (H13) * (64) + H59 - (1)];\n}\nfloat tmp21 = 0;\ntmp21 = l[(((m)) * ((H12) * (64) + H58 - (1))) + (H13) * (64) + H59];\ntmp19 = tmp20 + tmp21;\nfloat tmp22 = 0;\nif ((H13) * (64) + H59 + 1 < m) {\ntmp22 = l[(((m)) * ((H12) * (64) + H58 - (1))) + (H13) * (64) + H59 + 1];\n}\ntmp2[(64) * (((H58 - ((((66) < (n + 1 - ((H12) * (64)))) ? (66) : (n + 1 - ((H12) * (64)))))) + (1 + ((((66) < (n + 1 - ((H12) * (64)))) ? (66) : (n + 1 - ((H12) * (64)))) - (1))))) + H59] = tmp19 + tmp22;\n}\n}\n}\n}\nfloat* x0 = tmp2;\nfor (int H80 = 0; H80 < 1; H80++) {\nfor (int H81 = 0; H81 < 64; H81++) {\nif ((H13) * (64) + H81 < m) {\nif ((H12) * (64) + H80 < n) {\nfloat tmp23 = 0;\nfloat tmp24 = 0;\nif (0 <= (H12) * (64) + H80 - (1)) {\ntmp24 = x0[(((64)) * (H80)) + H81];\n}\nfloat tmp25 = 0;\ntmp25 = x0[(((64)) * (H80 + 1)) + H81];\ntmp23 = tmp24 + tmp25;\nfloat tmp26 = 0;\nif ((H12) * (64) + H80 + 1 < n) {\ntmp26 = x0[(((64)) * (H80 + 2)) + H81];\n}\noutput[(m) * ((((1 + ((((64) < (n - (1) - ((H12) * (64)))) ? (64) : (n - (1) - ((H12) * (64)))) - (1))) + (64 - ((((64) < (n - (1) - ((H12) * (64)))) ? (64) : (n - (1) - ((H12) * (64)))))))) * (H12) + H80) + (64) * (H13) + H81] = tmp23 + tmp26;\n}\n}\n}\n}\nfor (int H154 = 1; H154 < (((64) < (n - (1) - ((H12) * (64)))) ? (64) : (n - (1) - ((H12) * (64)))); H154++) {\nfor (int H158 = 0; H158 < (((64) < (m - ((H13) * (64)))) ? (64) : (m - ((H13) * (64)))); H158++) {\nfloat tmp27 = 0;\nfloat tmp28 = 0;\ntmp28 = x0[(((64)) * (H154)) + H158];\nfloat tmp29 = 0;\ntmp29 = x0[(((64)) * (H154 + 1)) + H158];\ntmp27 = tmp28 + tmp29;\nfloat tmp30 = 0;\ntmp30 = x0[(((64)) * (H154 + 2)) + H158];\noutput[(m) * ((((1 + ((((64) < (n - (1) - ((H12) * (64)))) ? (64) : (n - (1) - ((H12) * (64)))) - (1))) + (64 - ((((64) < (n - (1) - ((H12) * (64)))) ? (64) : (n - (1) - ((H12) * (64)))))))) * (H12) + ((H154 - (1)) + 1)) + (((((64) < (m - ((H13) * (64)))) ? (64) : (m - ((H13) * (64)))) + (64 - ((((64) < (m - ((H13) * (64)))) ? (64) : (m - ((H13) * (64)))))))) * (H13) + H158] = tmp27 + tmp30;\n}\nfor (int H231 = (((64) < (m - ((H13) * (64)))) ? (64) : (m - ((H13) * (64)))); H231 < 64; H231++) {\nif ((H13) * (64) + H231 < m) {\nfloat tmp31 = 0;\nfloat tmp32 = 0;\ntmp32 = x0[(((64)) * (H154)) + H231];\nfloat tmp33 = 0;\ntmp33 = x0[(((64)) * (H154 + 1)) + H231];\ntmp31 = tmp32 + tmp33;\nfloat tmp34 = 0;\ntmp34 = x0[(((64)) * (H154 + 2)) + H231];\noutput[(m) * ((((1 + ((((64) < (n - (1) - ((H12) * (64)))) ? (64) : (n - (1) - ((H12) * (64)))) - (1))) + (64 - ((((64) < (n - (1) - ((H12) * (64)))) ? (64) : (n - (1) - ((H12) * (64)))))))) * (H12) + ((H154 - (1)) + 1)) + (((((64) < (m - ((H13) * (64)))) ? (64) : (m - ((H13) * (64)))) + (64 - ((((64) < (m - ((H13) * (64)))) ? (64) : (m - ((H13) * (64)))))))) * (H13) + ((H231 - ((((64) < (m - ((H13) * (64)))) ? (64) : (m - ((H13) * (64)))))) + (((64) < (m - ((H13) * (64)))) ? (64) : (m - ((H13) * (64)))))] = tmp31 + tmp34;\n}\n}\n}\nfor (int H304 = (((64) < (n - (1) - ((H12) * (64)))) ? (64) : (n - (1) - ((H12) * (64)))); H304 < 64; H304++) {\nfor (int H305 = 0; H305 < 64; H305++) {\nif ((H13) * (64) + H305 < m) {\nif ((H12) * (64) + H304 < n) {\nfloat tmp35 = 0;\nfloat tmp36 = 0;\ntmp36 = x0[(((64)) * (H304)) + H305];\nfloat tmp37 = 0;\ntmp37 = x0[(((64)) * (H304 + 1)) + H305];\ntmp35 = tmp36 + tmp37;\nfloat tmp38 = 0;\nif ((H12) * (64) + H304 + 1 < n) {\ntmp38 = x0[(((64)) * (H304 + 2)) + H305];\n}\noutput[(m) * ((((1 + ((((64) < (n - (1) - ((H12) * (64)))) ? (64) : (n - (1) - ((H12) * (64)))) - (1))) + (64 - ((((64) < (n - (1) - ((H12) * (64)))) ? (64) : (n - (1) - ((H12) * (64)))))))) * (H12) + ((H304 - ((((64) < (n - (1) - ((H12) * (64)))) ? (64) : (n - (1) - ((H12) * (64)))))) + (1 + ((((64) < (n - (1) - ((H12) * (64)))) ? (64) : (n - (1) - ((H12) * (64)))) - (1))))) + (64) * (H13) + H305] = tmp35 + tmp38;\n}\n}\n}\n}\nfree(tmp2);\n}\n}\n}\n"
"!!!\ngather.h\n#include <stdlib.h>\n\nvoid gather(float* w,float* x,int C,int W,float*output);\n!!!\ngather.c\n#include <stdlib.h>\n#include @gather.h@\n\nvoid gather(float* w,float* x,int C,int W,float*output){\nfor (int H6 = 0; H6 < W; H6++) {\nfor (int H7 = 0; H7 < C; H7++) {\nfloat tmp2 = 0;\nif (H6 + H7 < W) {\nfloat tmp3 = 0;\ntmp3 = x[H6 + H7];\nfloat tmp4 = 0;\ntmp4 = w[H7];\ntmp2 = tmp3 * tmp4;\n}\noutput[H6] = output[H6] + tmp2;\n}\n}\n}\n"
"!!!\nscatter.h\n#include <stdlib.h>\n\nvoid scatter(float* w,float* x,int C,int W,float*output);\n!!!\nscatter.c\n#include <stdlib.h>\n#include @scatter.h@\n\nvoid scatter(float* w,float* x,int C,int W,float*output){\nfloat* tmp2 = (float*) calloc(1,(W) * sizeof (float));\nfor (int H6 = 0; H6 < W; H6++) {\nfor (int H8 = 0; H8 < W; H8++) {\nif (0 <= H6 - (H8)) {\nfloat tmp3 = 0;\ntmp3 = x[H6];\nfloat tmp4 = 0;\ntmp4 = w[H6 - (H8)];\ntmp2[H8] = tmp3 * tmp4;\n}\n}\nfor (int tmp5 = 0; tmp5 < W; tmp5++) {\noutput[tmp5] = output[tmp5] + tmp2[tmp5];\n}\n}\nfree(tmp2);\n}\n"
"!!!\nim2collifted.h\n#include <stdlib.h>\n\nvoid im2collifted(float* x,float* w,int RR,int W,int K,int B,int A,float*output);\n!!!\nim2collifted.c\n#include <stdlib.h>\n#include @im2collifted.h@\n\nvoid im2collifted(float* x,float* w,int RR,int W,int K,int B,int A,float*output){\nfloat* tmp2 = (float*) calloc(1,(W) * (RR) * sizeof (float));\nfor (int H10 = 0; H10 < W; H10++) {\nfor (int H11 = 0; H11 < RR; H11++) {\nif (H10 + H11 < K) {\ntmp2[(RR) * (H10) + H11] = x[H10 + H11];\n}\n}\n}\nfloat* x1 = tmp2;\nfor (int H13 = 0; H13 < K; H13++) {\nfor (int H14 = 0; H14 < W; H14++) {\nfor (int H15 = 0; H15 < RR; H15++) {\nfloat tmp3 = 0;\nfloat tmp4 = 0;\ntmp4 = w[(((B)) * (H13)) + H15];\nfloat tmp5 = 0;\ntmp5 = x1[(((RR)) * (H14)) + H15];\ntmp3 = tmp4 * tmp5;\noutput[(W) * (H13) + H14] = output[(W) * (H13) + H14] + tmp3;\n}\n}\n}\nfree(tmp2);\n}\n"
"!!!\nim2col.h\n#include <stdlib.h>\n\nvoid im2col(float* x,float* w,int RR,int W,int K,int B,int A,float*output);\n!!!\nim2col.c\n#include <stdlib.h>\n#include @im2col.h@\n\nvoid im2col(float* x,float* w,int RR,int W,int K,int B,int A,float*output){\nfloat* tmp2 = (float*) calloc(1,(W) * (RR) * sizeof (float));\nfor (int H10 = 0; H10 < W; H10++) {\nfor (int H11 = 0; H11 < RR; H11++) {\nif (H10 + H11 < K) {\ntmp2[(RR) * (H10) + H11] = x[H10 + H11];\n}\n}\n}\nfloat* x1 = tmp2;\nfor (int H13 = 0; H13 < K; H13++) {\nfor (int H14 = 0; H14 < W; H14++) {\nfor (int H15 = 0; H15 < RR; H15++) {\nfloat tmp3 = 0;\nfloat tmp4 = 0;\ntmp4 = w[(((B)) * (H13)) + H15];\nfloat tmp5 = 0;\ntmp5 = x1[(((RR)) * (H14)) + H15];\ntmp3 = tmp4 * tmp5;\noutput[(W) * (H13) + H14] = output[(W) * (H13) + H14] + tmp3;\n}\n}\n}\nfree(tmp2);\n}\n"
"!!!\nblurpart.h\n#include <stdlib.h>\n\nvoid blurpart(float* v,int m,int n,float*output);\n!!!\nblurpart.c\n#include <stdlib.h>\n#include @blurpart.h@\n\nvoid blurpart(float* v,int m,int n,float*output){\nfor (int H32 = 0; H32 < 1; H32++) {\nfor (int H33 = 0; H33 < m; H33++) {\nfloat tmp2 = 0;\nfloat tmp3 = 0;\nif (0 <= H32 - (1)) {\nfloat tmp4 = 0;\nfloat tmp5 = 0;\nif (0 <= H33 - (1)) {\ntmp5 = v[(((m)) * (H32 - (1))) + H33 - (1)];\n}\nfloat tmp6 = 0;\ntmp6 = v[(((m)) * (H32 - (1))) + H33];\ntmp4 = tmp5 + tmp6;\nfloat tmp7 = 0;\nif (H33 + 1 < m) {\ntmp7 = v[(((m)) * (H32 - (1))) + H33 + 1];\n}\ntmp3 = tmp4 + tmp7;\n}\nfloat tmp8 = 0;\nfloat tmp9 = 0;\nfloat tmp10 = 0;\nif (0 <= H33 - (1)) {\ntmp10 = v[(((m)) * (H32)) + H33 - (1)];\n}\nfloat tmp11 = 0;\ntmp11 = v[(((m)) * (H32)) + H33];\ntmp9 = tmp10 + tmp11;\nfloat tmp12 = 0;\nif (H33 + 1 < m) {\ntmp12 = v[(((m)) * (H32)) + H33 + 1];\n}\ntmp8 = tmp9 + tmp12;\ntmp2 = tmp3 + tmp8;\nfloat tmp13 = 0;\nfloat tmp14 = 0;\nfloat tmp15 = 0;\nif (0 <= H33 - (1)) {\ntmp15 = v[(((m)) * (H32 + 1)) + H33 - (1)];\n}\nfloat tmp16 = 0;\ntmp16 = v[(((m)) * (H32 + 1)) + H33];\ntmp14 = tmp15 + tmp16;\nfloat tmp17 = 0;\nif (H33 + 1 < m) {\ntmp17 = v[(((m)) * (H32 + 1)) + H33 + 1];\n}\ntmp13 = tmp14 + tmp17;\noutput[(m) * (H32) + H33] = tmp2 + tmp13;\n}\n}\nfor (int H34 = 1; H34 < (n - (1 + 0)); H34++) {\nfor (int H43 = 0; H43 < 1; H43++) {\nfloat tmp18 = 0;\nfloat tmp19 = 0;\nfloat tmp20 = 0;\nfloat tmp21 = 0;\nif (0 <= H43 - (1)) {\ntmp21 = v[(((m)) * (H34 - (1))) + H43 - (1)];\n}\nfloat tmp22 = 0;\ntmp22 = v[(((m)) * (H34 - (1))) + H43];\ntmp20 = tmp21 + tmp22;\nfloat tmp23 = 0;\ntmp23 = v[(((m)) * (H34 - (1))) + H43 + 1];\ntmp19 = tmp20 + tmp23;\nfloat tmp24 = 0;\nfloat tmp25 = 0;\nfloat tmp26 = 0;\nif (0 <= H43 - (1)) {\ntmp26 = v[(((m)) * (H34)) + H43 - (1)];\n}\nfloat tmp27 = 0;\ntmp27 = v[(((m)) * (H34)) + H43];\ntmp25 = tmp26 + tmp27;\nfloat tmp28 = 0;\ntmp28 = v[(((m)) * (H34)) + H43 + 1];\ntmp24 = tmp25 + tmp28;\ntmp18 = tmp19 + tmp24;\nfloat tmp29 = 0;\nfloat tmp30 = 0;\nfloat tmp31 = 0;\nif (0 <= H43 - (1)) {\ntmp31 = v[(((m)) * (H34 + 1)) + H43 - (1)];\n}\nfloat tmp32 = 0;\ntmp32 = v[(((m)) * (H34 + 1)) + H43];\ntmp30 = tmp31 + tmp32;\nfloat tmp33 = 0;\ntmp33 = v[(((m)) * (H34 + 1)) + H43 + 1];\ntmp29 = tmp30 + tmp33;\noutput[(((1 + ((m - (1 + 0)) - (1))) + (m - (m - (1))))) * (((H34 - (1)) + 1)) + H43] = tmp18 + tmp29;\n}\nfor (int H44 = 1; H44 < (m - (1 + 0)); H44++) {\nfloat tmp34 = 0;\nfloat tmp35 = 0;\nfloat tmp36 = 0;\nfloat tmp37 = 0;\ntmp37 = v[(((m)) * (H34 - (1))) + H44 - (1)];\nfloat tmp38 = 0;\ntmp38 = v[(((m)) * (H34 - (1))) + H44];\ntmp36 = tmp37 + tmp38;\nfloat tmp39 = 0;\ntmp39 = v[(((m)) * (H34 - (1))) + H44 + 1];\ntmp35 = tmp36 + tmp39;\nfloat tmp40 = 0;\nfloat tmp41 = 0;\nfloat tmp42 = 0;\ntmp42 = v[(((m)) * (H34)) + H44 - (1)];\nfloat tmp43 = 0;\ntmp43 = v[(((m)) * (H34)) + H44];\ntmp41 = tmp42 + tmp43;\nfloat tmp44 = 0;\ntmp44 = v[(((m)) * (H34)) + H44 + 1];\ntmp40 = tmp41 + tmp44;\ntmp34 = tmp35 + tmp40;\nfloat tmp45 = 0;\nfloat tmp46 = 0;\nfloat tmp47 = 0;\ntmp47 = v[(((m)) * (H34 + 1)) + H44 - (1)];\nfloat tmp48 = 0;\ntmp48 = v[(((m)) * (H34 + 1)) + H44];\ntmp46 = tmp47 + tmp48;\nfloat tmp49 = 0;\ntmp49 = v[(((m)) * (H34 + 1)) + H44 + 1];\ntmp45 = tmp46 + tmp49;\noutput[(((1 + ((m - (1 + 0)) - (1))) + (m - (m - (1))))) * (((H34 - (1)) + 1)) + ((H44 - (1)) + 1)] = tmp34 + tmp45;\n}\nfor (int H45 = m - (1); H45 < m; H45++) {\nfloat tmp50 = 0;\nfloat tmp51 = 0;\nfloat tmp52 = 0;\nfloat tmp53 = 0;\nfloat tmp54 = 0;\ntmp54 = v[(((m)) * (H34 - (1))) + H45 - (1)];\nfloat tmp55 = 0;\ntmp55 = v[(((m)) * (H34 - (1))) + H45];\ntmp53 = tmp54 + tmp55;\nfloat tmp56 = 0;\nif (H45 + 1 < m) {\ntmp56 = v[(((m)) * (H34 - (1))) + H45 + 1];\n}\ntmp52 = tmp53 + tmp56;\nfloat tmp57 = 0;\nfloat tmp58 = 0;\nfloat tmp59 = 0;\ntmp59 = v[(((m)) * (H34)) + H45 - (1)];\nfloat tmp60 = 0;\ntmp60 = v[(((m)) * (H34)) + H45];\ntmp58 = tmp59 + tmp60;\nfloat tmp61 = 0;\nif (H45 + 1 < m) {\ntmp61 = v[(((m)) * (H34)) + H45 + 1];\n}\ntmp57 = tmp58 + tmp61;\ntmp51 = tmp52 + tmp57;\nfloat tmp62 = 0;\nfloat tmp63 = 0;\ntmp63 = v[(((m)) * (H34 + 1)) + H45 - (1)];\nfloat tmp64 = 0;\ntmp64 = v[(((m)) * (H34 + 1)) + H45];\ntmp62 = tmp63 + tmp64;\ntmp50 = tmp51 + tmp62;\nfloat tmp65 = 0;\nif (H45 + 1 < m) {\ntmp65 = v[(((m)) * (H34 + 1)) + H45 + 1];\n}\noutput[(((1 + ((m - (1 + 0)) - (1))) + (m - (m - (1))))) * (((H34 - (1)) + 1)) + ((H45 - (m - (1))) + (1 + ((m - (1 + 0)) - (1))))] = tmp50 + tmp65;\n}\n}\nfor (int H46 = n - (1); H46 < n; H46++) {\nfor (int H47 = 0; H47 < m; H47++) {\nfloat tmp66 = 0;\nfloat tmp67 = 0;\nfloat tmp68 = 0;\nfloat tmp69 = 0;\nif (0 <= H47 - (1)) {\ntmp69 = v[(((m)) * (H46 - (1))) + H47 - (1)];\n}\nfloat tmp70 = 0;\ntmp70 = v[(((m)) * (H46 - (1))) + H47];\ntmp68 = tmp69 + tmp70;\nfloat tmp71 = 0;\nif (H47 + 1 < m) {\ntmp71 = v[(((m)) * (H46 - (1))) + H47 + 1];\n}\ntmp67 = tmp68 + tmp71;\nfloat tmp72 = 0;\nfloat tmp73 = 0;\nfloat tmp74 = 0;\nif (0 <= H47 - (1)) {\ntmp74 = v[(((m)) * (H46)) + H47 - (1)];\n}\nfloat tmp75 = 0;\ntmp75 = v[(((m)) * (H46)) + H47];\ntmp73 = tmp74 + tmp75;\nfloat tmp76 = 0;\nif (H47 + 1 < m) {\ntmp76 = v[(((m)) * (H46)) + H47 + 1];\n}\ntmp72 = tmp73 + tmp76;\ntmp66 = tmp67 + tmp72;\nfloat tmp77 = 0;\nif (H46 + 1 < n) {\nfloat tmp78 = 0;\nfloat tmp79 = 0;\nif (0 <= H47 - (1)) {\ntmp79 = v[(((m)) * (H46 + 1)) + H47 - (1)];\n}\nfloat tmp80 = 0;\ntmp80 = v[(((m)) * (H46 + 1)) + H47];\ntmp78 = tmp79 + tmp80;\nfloat tmp81 = 0;\nif (H47 + 1 < m) {\ntmp81 = v[(((m)) * (H46 + 1)) + H47 + 1];\n}\ntmp77 = tmp78 + tmp81;\n}\noutput[(m) * (((H46 - (n - (1))) + (1 + ((n - (1 + 0)) - (1))))) + H47] = tmp66 + tmp77;\n}\n}\n}\n"
"!!!\nblurtwopart.h\n#include <stdlib.h>\n\nvoid blurtwopart(float* v,int M,int N,float*output);\n!!!\nblurtwopart.c\n#include <stdlib.h>\n#include @blurtwopart.h@\n\nvoid blurtwopart(float* v,int M,int N,float*output){\nfloat* tmp2 = (float*) calloc(1,(((1 + ((N + 1 + 0) - (1))) + (N + 2 - (N + 1)))) * (M) * sizeof (float));\nfor (int H35 = 0; H35 < 1; H35++) {\nfor (int H36 = 0; H36 < M; H36++) {\ntmp2[(M) * (H35) + H36] = 0;\n}\n}\nfor (int H37 = 1; H37 < (N + 1 + 0); H37++) {\nfor (int H46 = 0; H46 < 1; H46++) {\nfloat tmp3 = 0;\ntmp3 = v[(((M)) * (H37 - (1))) + H46];\nfloat tmp4 = 0;\ntmp4 = v[(((M)) * (H37 - (1))) + H46 + 1];\ntmp2[(((1 + ((M - (1 + 0)) - (1))) + (M - (M - (1))))) * (((H37 - (1)) + 1)) + H46] = tmp3 + tmp4;\n}\nfor (int H47 = 1; H47 < (M - (1 + 0)); H47++) {\nfloat tmp5 = 0;\nfloat tmp6 = 0;\ntmp6 = v[(((M)) * (H37 - (1))) + H47 - (1)];\nfloat tmp7 = 0;\ntmp7 = v[(((M)) * (H37 - (1))) + H47];\ntmp5 = tmp6 + tmp7;\nfloat tmp8 = 0;\ntmp8 = v[(((M)) * (H37 - (1))) + H47 + 1];\ntmp2[(((1 + ((M - (1 + 0)) - (1))) + (M - (M - (1))))) * (((H37 - (1)) + 1)) + ((H47 - (1)) + 1)] = tmp5 + tmp8;\n}\nfor (int H48 = M - (1); H48 < M; H48++) {\nfloat tmp9 = 0;\ntmp9 = v[(((M)) * (H37 - (1))) + H48 - (1)];\nfloat tmp10 = 0;\ntmp10 = v[(((M)) * (H37 - (1))) + H48];\ntmp2[(((1 + ((M - (1 + 0)) - (1))) + (M - (M - (1))))) * (((H37 - (1)) + 1)) + ((H48 - (M - (1))) + (1 + ((M - (1 + 0)) - (1))))] = tmp9 + tmp10;\n}\n}\nfor (int H49 = N + 1; H49 < N + 2; H49++) {\nfor (int H50 = 0; H50 < M; H50++) {\ntmp2[(M) * (((H49 - (N + 1)) + (1 + ((N + 1 + 0) - (1))))) + H50] = 0;\n}\n}\nfloat* x0 = tmp2;\nfor (int H52 = 0; H52 < N; H52++) {\nfor (int H53 = 0; H53 < M; H53++) {\nfloat tmp11 = 0;\nfloat tmp12 = 0;\ntmp12 = x0[(((M)) * (H52)) + H53];\nfloat tmp13 = 0;\ntmp13 = x0[(((M)) * (H52 + 1)) + H53];\ntmp11 = tmp12 + tmp13;\nfloat tmp14 = 0;\ntmp14 = x0[(((M)) * (H52 + 2)) + H53];\noutput[(M) * (H52) + H53] = tmp11 + tmp14;\n}\n}\nfree(tmp2);\n}\n"
