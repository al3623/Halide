COQDEP VFILES
COQC GenLib.v
"!!!\nconv4.h\n#include <stdlib.h>\n\nvoid conv4(int m,int n,float* c,float*output);\n!!!\nconv4.c\n#include <stdlib.h>\n#include @conv4.h@\n\nvoid conv4(int m,int n,float* c,float*output){\nfor (int H3 = 0; H3 < n; H3++) {\nif (0 <= H3 - (2) && H3 - (2) < m) {\noutput[H3] = c[H3 - (2)];\n}\n}\n}\n"
"!!!\nconv1.h\n#include <stdlib.h>\n\nvoid conv1(int m,int n,float* c,float*output);\n!!!\nconv1.c\n#include <stdlib.h>\n#include @conv1.h@\n\nvoid conv1(int m,int n,float* c,float*output){\nfloat* tmp4 = (float*) aligned_alloc(4,(n - ((-(m)) + 1)) * sizeof (float));\nfor (int H3 = 0; H3 < n; H3++) {\nfor (int H4 = 0; H4 < m; H4++) {\nfloat tmp2 = 0;\nif (0 <= H3 - (H4)) {\nfloat tmp3 = 0;\nfor (int H9 = (-(m)) + 1; H9 < n; H9++) {\nif (H9 == 2 + (-(m)) + 1) {\ntmp4[(H9 - ((-(m)) + 1))] = 1;\n}\n}\ntmp3 = tmp4[H3 - (H4)];\nfloat tmp5 = 0;\ntmp5 = c[H4];\ntmp2 = tmp3 * tmp5;\n}\noutput[H3] = output[H3] + tmp2;\n}\n}\nfree(tmp4);\n}\n"
"!!!\nblurim.h\n#include <stdlib.h>\n\nvoid blurim(float* v,int M,int N,float*output);\n!!!\nblurim.c\n#include <stdlib.h>\n#include @blurim.h@\n\nvoid blurim(float* v,int M,int N,float*output){\nfor (int H3 = 0; H3 < N; H3++) {\nfor (int H4 = 0; H4 < M; H4++) {\nfloat tmp2 = 0;\nfloat tmp3 = 0;\nif (0 <= H3 - (1) && H3 - (1) < N) {\nfloat tmp4 = 0;\nfloat tmp5 = 0;\nif (0 <= H4 - (1)) {\ntmp5 = v[(((M)) * (H3 - (1))) + H4 - (1)];\n}\nfloat tmp6 = 0;\ntmp6 = v[(((M)) * (H3 - (1))) + H4];\ntmp4 = tmp5 + tmp6;\nfloat tmp7 = 0;\nif (H4 + 1 < M) {\ntmp7 = v[(((M)) * (H3 - (1))) + H4 + 1];\n}\ntmp3 = tmp4 + tmp7;\n}\nfloat tmp8 = 0;\nif (0 <= H3) {\nfloat tmp9 = 0;\nfloat tmp10 = 0;\nif (0 <= H4 - (1)) {\ntmp10 = v[(((M)) * (H3)) + H4 - (1)];\n}\nfloat tmp11 = 0;\ntmp11 = v[(((M)) * (H3)) + H4];\ntmp9 = tmp10 + tmp11;\nfloat tmp12 = 0;\nif (H4 + 1 < M) {\ntmp12 = v[(((M)) * (H3)) + H4 + 1];\n}\ntmp8 = tmp9 + tmp12;\n}\ntmp2 = tmp3 + tmp8;\nfloat tmp13 = 0;\nif (0 <= H3 + 1 && H3 + 1 < N) {\nfloat tmp14 = 0;\nfloat tmp15 = 0;\nif (0 <= H4 - (1)) {\ntmp15 = v[(((M)) * (H3 + 1)) + H4 - (1)];\n}\nfloat tmp16 = 0;\ntmp16 = v[(((M)) * (H3 + 1)) + H4];\ntmp14 = tmp15 + tmp16;\nfloat tmp17 = 0;\nif (H4 + 1 < M) {\ntmp17 = v[(((M)) * (H3 + 1)) + H4 + 1];\n}\ntmp13 = tmp14 + tmp17;\n}\noutput[(M) * (H3) + H4] = tmp2 + tmp13;\n}\n}\n}\n"
"!!!\nblurtwo.h\n#include <stdlib.h>\n\nvoid blurtwo(float* v,int M,int N,float*output);\n!!!\nblurtwo.c\n#include <stdlib.h>\n#include @blurtwo.h@\n\nvoid blurtwo(float* v,int M,int N,float*output){\nfloat* tmp2 = (float*) aligned_alloc(4,((N + 2)) * (M) * sizeof (float));\nfor (int H4 = 0; H4 < (N + 2); H4++) {\nfor (int H5 = 0; H5 < M; H5++) {\nif (0 <= H4 - (1) && H4 - (1) < N) {\nfloat tmp3 = 0;\nfloat tmp4 = 0;\nif (0 <= H5 - (1)) {\ntmp4 = v[(((M)) * (H4 - (1))) + H5 - (1)];\n}\nfloat tmp5 = 0;\ntmp5 = v[(((M)) * (H4 - (1))) + H5];\ntmp3 = tmp4 + tmp5;\nfloat tmp6 = 0;\nif (H5 + 1 < M) {\ntmp6 = v[(((M)) * (H4 - (1))) + H5 + 1];\n}\ntmp2[(M) * (H4) + H5] = tmp3 + tmp6;\n}\n}\n}\nfloat* x = tmp2;\nfor (int H17 = 0; H17 < N; H17++) {\nfor (int H18 = 0; H18 < M; H18++) {\nfloat tmp7 = 0;\nfloat tmp8 = 0;\ntmp8 = x[(((M)) * (H17)) + H18];\nfloat tmp9 = 0;\ntmp9 = x[(((M)) * (H17 + 1)) + H18];\ntmp7 = tmp8 + tmp9;\nfloat tmp10 = 0;\ntmp10 = x[(((M)) * (H17 + 2)) + H18];\noutput[(M) * (H17) + H18] = tmp7 + tmp10;\n}\n}\nfree(tmp2);\n}\n"
"!!!\nblurtiles.h\n#include <stdlib.h>\n\nvoid blurtiles(float* v,int M,int N,float*output);\n!!!\nblurtiles.c\n#include <stdlib.h>\n#include @blurtiles.h@\n\nvoid blurtiles(float* v,int M,int N,float*output){\nfloat* tmp2 = (float*) aligned_alloc(4,(((1 + 5 - (1)) + 6 - (5))) * (4) * sizeof (float));\nfor (int H3 = 0; H3 < ((N) + (4) - 1 ) / (4); H3++) {\nfor (int H4 = 0; H4 < ((M) + (4) - 1 ) / (4); H4++) {\nfor (int H8 = 0; H8 < 1; H8++) {\nfor (int H9 = 0; H9 < 4; H9++) {\nif (0 <= (H3) * (4) + H8 - (1) && (H3) * (4) + H8 - (1) < N) {\nfloat tmp3 = 0;\nfloat tmp4 = 0;\nif (0 <= (H4) * (4) + H9 - (1) && (H4) * (4) + H9 - (1) < M) {\ntmp4 = v[(((M)) * ((H3) * (4) + H8 - (1))) + (H4) * (4) + H9 - (1)];\n}\nfloat tmp5 = 0;\nif ((H4) * (4) + H9 < M) {\ntmp5 = v[(((M)) * ((H3) * (4) + H8 - (1))) + (H4) * (4) + H9];\n}\ntmp3 = tmp4 + tmp5;\nfloat tmp6 = 0;\nif ((H4) * (4) + H9 + 1 < M) {\ntmp6 = v[(((M)) * ((H3) * (4) + H8 - (1))) + (H4) * (4) + H9 + 1];\n}\ntmp2[(4) * (H8) + H9] = tmp3 + tmp6;\n}\n}\n}\nfor (int H21 = 1; H21 < 5; H21++) {\nfor (int H22 = 0; H22 < 4; H22++) {\nif (0 <= (H3) * (4) + H21 - (1) && (H3) * (4) + H21 - (1) < N) {\nfloat tmp7 = 0;\nfloat tmp8 = 0;\nif (0 <= (H4) * (4) + H22 - (1) && (H4) * (4) + H22 - (1) < M) {\ntmp8 = v[(((M)) * ((H3) * (4) + H21 - (1))) + (H4) * (4) + H22 - (1)];\n}\nfloat tmp9 = 0;\nif ((H4) * (4) + H22 < M) {\ntmp9 = v[(((M)) * ((H3) * (4) + H21 - (1))) + (H4) * (4) + H22];\n}\ntmp7 = tmp8 + tmp9;\nfloat tmp10 = 0;\nif ((H4) * (4) + H22 + 1 < M) {\ntmp10 = v[(((M)) * ((H3) * (4) + H21 - (1))) + (H4) * (4) + H22 + 1];\n}\ntmp2[(4) * ((H21 - (1))) + H22 + (1) * (4)] = tmp7 + tmp10;\n}\n}\n}\nfor (int H34 = 5; H34 < 6; H34++) {\nfor (int H35 = 0; H35 < 4; H35++) {\nif (0 <= (H3) * (4) + H34 - (1) && (H3) * (4) + H34 - (1) < N) {\nfloat tmp11 = 0;\nfloat tmp12 = 0;\nif (0 <= (H4) * (4) + H35 - (1) && (H4) * (4) + H35 - (1) < M) {\ntmp12 = v[(((M)) * ((H3) * (4) + H34 - (1))) + (H4) * (4) + H35 - (1)];\n}\nfloat tmp13 = 0;\nif ((H4) * (4) + H35 < M) {\ntmp13 = v[(((M)) * ((H3) * (4) + H34 - (1))) + (H4) * (4) + H35];\n}\ntmp11 = tmp12 + tmp13;\nfloat tmp14 = 0;\nif ((H4) * (4) + H35 + 1 < M) {\ntmp14 = v[(((M)) * ((H3) * (4) + H34 - (1))) + (H4) * (4) + H35 + 1];\n}\ntmp2[(4) * ((H34 - (5))) + H35 + ((1 + 5 - (1))) * (4)] = tmp11 + tmp14;\n}\n}\n}\nfloat* x = tmp2;\nfor (int H47 = 0; H47 < 4; H47++) {\nfor (int H48 = 0; H48 < 4; H48++) {\nif ((H4) * (4) + H47 < M) {\nif ((H3) * (4) + H48 < N) {\nfloat tmp15 = 0;\nfloat tmp16 = 0;\ntmp16 = x[(((4)) * (H48)) + H47];\nfloat tmp17 = 0;\ntmp17 = x[(((4)) * (H48 + 1)) + H47];\ntmp15 = tmp16 + tmp17;\nfloat tmp18 = 0;\nif ((H3) * (4) + H48 + 1 < N) {\ntmp18 = x[(((4)) * (H48 + 2)) + H47];\n}\noutput[(M) * ((4) * (H3) + H48) + (4) * (H4) + H47] = tmp15 + tmp18;\n}\n}\n}\n}\n}\n}\nfree(tmp2);\n}\n"
"!!!\ngather.h\n#include <stdlib.h>\n\nvoid gather(float* w,float* x,int C,int W,float*output);\n!!!\ngather.c\n#include <stdlib.h>\n#include @gather.h@\n\nvoid gather(float* w,float* x,int C,int W,float*output){\nfor (int H5 = 0; H5 < W; H5++) {\nfor (int H6 = 0; H6 < C; H6++) {\nfloat tmp2 = 0;\nif (H5 + H6 < W) {\nfloat tmp3 = 0;\ntmp3 = x[H5 + H6];\nfloat tmp4 = 0;\ntmp4 = w[H6];\ntmp2 = tmp3 * tmp4;\n}\noutput[H5] = output[H5] + tmp2;\n}\n}\n}\n"
"!!!\nscatter.h\n#include <stdlib.h>\n\nvoid scatter(float* w,float* x,int C,int W,float*output);\n!!!\nscatter.c\n#include <stdlib.h>\n#include @scatter.h@\n\nvoid scatter(float* w,float* x,int C,int W,float*output){\nfloat* tmp2 = (float*) aligned_alloc(4,(W) * sizeof (float));\nfor (int H5 = 0; H5 < W; H5++) {\nfor (int H7 = 0; H7 < W; H7++) {\nif (0 <= H5 - (H7)) {\nfloat tmp3 = 0;\ntmp3 = x[H5];\nfloat tmp4 = 0;\ntmp4 = w[H5 - (H7)];\ntmp2[H7] = tmp3 * tmp4;\n}\n}\nfor (int tmp5 = 0; tmp5 < W; tmp5++) {\noutput[tmp5] = output[tmp5] + tmp2[tmp5];\n}\n}\nfree(tmp2);\n}\n"
"!!!\nim2collifted.h\n#include <stdlib.h>\n\nvoid im2collifted(float* x,float* w,int RR,int W,int K,int B,int A,float*output);\n!!!\nim2collifted.c\n#include <stdlib.h>\n#include @im2collifted.h@\n\nvoid im2collifted(float* x,float* w,int RR,int W,int K,int B,int A,float*output){\nfloat* tmp2 = (float*) aligned_alloc(4,(W) * (RR) * sizeof (float));\nfor (int H6 = 0; H6 < W; H6++) {\nfor (int H7 = 0; H7 < RR; H7++) {\nif (H6 + H7 < K) {\ntmp2[(RR) * (H6) + H7] = x[H6 + H7];\n}\n}\n}\nfloat* x0 = tmp2;\nfor (int H10 = 0; H10 < K; H10++) {\nfor (int H11 = 0; H11 < W; H11++) {\nfor (int H12 = 0; H12 < RR; H12++) {\nfloat tmp3 = 0;\nfloat tmp4 = 0;\ntmp4 = w[(((B)) * (H10)) + H12];\nfloat tmp5 = 0;\ntmp5 = x0[(((RR)) * (H11)) + H12];\ntmp3 = tmp4 * tmp5;\noutput[(W) * (H10) + H11] = output[(W) * (H10) + H11] + tmp3;\n}\n}\n}\nfree(tmp2);\n}\n"
"!!!\nim2col.h\n#include <stdlib.h>\n\nvoid im2col(float* x,float* w,int RR,int W,int K,int B,int A,float*output);\n!!!\nim2col.c\n#include <stdlib.h>\n#include @im2col.h@\n\nvoid im2col(float* x,float* w,int RR,int W,int K,int B,int A,float*output){\nfloat* tmp2 = (float*) aligned_alloc(4,(W) * (RR) * sizeof (float));\nfor (int H6 = 0; H6 < W; H6++) {\nfor (int H7 = 0; H7 < RR; H7++) {\nif (H6 + H7 < K) {\ntmp2[(RR) * (H6) + H7] = x[H6 + H7];\n}\n}\n}\nfloat* x0 = tmp2;\nfor (int H10 = 0; H10 < K; H10++) {\nfor (int H11 = 0; H11 < W; H11++) {\nfor (int H12 = 0; H12 < RR; H12++) {\nfloat tmp3 = 0;\nfloat tmp4 = 0;\ntmp4 = w[(((B)) * (H10)) + H12];\nfloat tmp5 = 0;\ntmp5 = x0[(((RR)) * (H11)) + H12];\ntmp3 = tmp4 * tmp5;\noutput[(W) * (H10) + H11] = output[(W) * (H10) + H11] + tmp3;\n}\n}\n}\nfree(tmp2);\n}\n"
"!!!\nfusetest.h\n#include <stdlib.h>\n\nvoid fusetest(int m,int n,float* v,float*output);\n!!!\nfusetest.c\n#include <stdlib.h>\n#include @fusetest.h@\n\nvoid fusetest(int m,int n,float* v,float*output){\nfor (int H4 = 0; H4 < n; H4++) {\nfor (int H5 = 0; H5 < m; H5++) {\noutput[(m) * (H4) + H5] = v[(((m)) * (H4)) + H5];\n}\n}\nfor (int H9 = 0; H9 < n; H9++) {\nfor (int H11 = 0; H11 < 1; H11++) {\noutput[(((1 + (m - 1)))) * (H9) + H11 + (n) * (m)] = 1;\n}\nfor (int H13 = 0; H13 < (m - 1); H13++) {\noutput[(((1 + (m - 1)))) * (H9) + H13 + (n) * (m) + (1)] = v[(((m)) * (H9)) + H13];\n}\n}\n}\n"
"!!!\nblurpart.h\n#include <stdlib.h>\n\nvoid blurpart(float* v,int m,int n,float*output);\n!!!\nblurpart.c\n#include <stdlib.h>\n#include @blurpart.h@\n\nvoid blurpart(float* v,int m,int n,float*output){\nfor (int H5 = 0; H5 < 1; H5++) {\nfor (int H6 = 0; H6 < m; H6++) {\nfloat tmp2 = 0;\nfloat tmp3 = 0;\nif (0 <= H5 - (1)) {\nfloat tmp4 = 0;\nfloat tmp5 = 0;\nif (0 <= H6 - (1)) {\ntmp5 = v[(((m)) * (H5 - (1))) + H6 - (1)];\n}\nfloat tmp6 = 0;\ntmp6 = v[(((m)) * (H5 - (1))) + H6];\ntmp4 = tmp5 + tmp6;\nfloat tmp7 = 0;\nif (H6 + 1 < m) {\ntmp7 = v[(((m)) * (H5 - (1))) + H6 + 1];\n}\ntmp3 = tmp4 + tmp7;\n}\nfloat tmp8 = 0;\nfloat tmp9 = 0;\nfloat tmp10 = 0;\nif (0 <= H6 - (1)) {\ntmp10 = v[(((m)) * (H5)) + H6 - (1)];\n}\nfloat tmp11 = 0;\ntmp11 = v[(((m)) * (H5)) + H6];\ntmp9 = tmp10 + tmp11;\nfloat tmp12 = 0;\nif (H6 + 1 < m) {\ntmp12 = v[(((m)) * (H5)) + H6 + 1];\n}\ntmp8 = tmp9 + tmp12;\ntmp2 = tmp3 + tmp8;\nfloat tmp13 = 0;\nfloat tmp14 = 0;\nfloat tmp15 = 0;\nif (0 <= H6 - (1)) {\ntmp15 = v[(((m)) * (H5 + 1)) + H6 - (1)];\n}\nfloat tmp16 = 0;\ntmp16 = v[(((m)) * (H5 + 1)) + H6];\ntmp14 = tmp15 + tmp16;\nfloat tmp17 = 0;\nif (H6 + 1 < m) {\ntmp17 = v[(((m)) * (H5 + 1)) + H6 + 1];\n}\ntmp13 = tmp14 + tmp17;\noutput[(m) * (H5) + H6] = tmp2 + tmp13;\n}\n}\nfor (int H42 = 1; H42 < (n - 1); H42++) {\nfor (int H45 = 0; H45 < 1; H45++) {\nfloat tmp18 = 0;\nfloat tmp19 = 0;\nfloat tmp20 = 0;\nfloat tmp21 = 0;\nif (0 <= H45 - (1)) {\ntmp21 = v[(((m)) * (H42 - (1))) + H45 - (1)];\n}\nfloat tmp22 = 0;\ntmp22 = v[(((m)) * (H42 - (1))) + H45];\ntmp20 = tmp21 + tmp22;\nfloat tmp23 = 0;\ntmp23 = v[(((m)) * (H42 - (1))) + H45 + 1];\ntmp19 = tmp20 + tmp23;\nfloat tmp24 = 0;\nfloat tmp25 = 0;\nfloat tmp26 = 0;\nif (0 <= H45 - (1)) {\ntmp26 = v[(((m)) * (H42)) + H45 - (1)];\n}\nfloat tmp27 = 0;\ntmp27 = v[(((m)) * (H42)) + H45];\ntmp25 = tmp26 + tmp27;\nfloat tmp28 = 0;\ntmp28 = v[(((m)) * (H42)) + H45 + 1];\ntmp24 = tmp25 + tmp28;\ntmp18 = tmp19 + tmp24;\nfloat tmp29 = 0;\nfloat tmp30 = 0;\nfloat tmp31 = 0;\nif (0 <= H45 - (1)) {\ntmp31 = v[(((m)) * (H42 + 1)) + H45 - (1)];\n}\nfloat tmp32 = 0;\ntmp32 = v[(((m)) * (H42 + 1)) + H45];\ntmp30 = tmp31 + tmp32;\nfloat tmp33 = 0;\ntmp33 = v[(((m)) * (H42 + 1)) + H45 + 1];\ntmp29 = tmp30 + tmp33;\noutput[((((1 + (m - 1) - (1)) + m - (m - (1))))) * ((H42 - (1))) + H45 + (1) * (m)] = tmp18 + tmp29;\n}\nfor (int H81 = 1; H81 < (m - 1); H81++) {\nfloat tmp34 = 0;\nfloat tmp35 = 0;\nfloat tmp36 = 0;\nfloat tmp37 = 0;\ntmp37 = v[(((m)) * (H42 - (1))) + H81 - (1)];\nfloat tmp38 = 0;\ntmp38 = v[(((m)) * (H42 - (1))) + H81];\ntmp36 = tmp37 + tmp38;\nfloat tmp39 = 0;\ntmp39 = v[(((m)) * (H42 - (1))) + H81 + 1];\ntmp35 = tmp36 + tmp39;\nfloat tmp40 = 0;\nfloat tmp41 = 0;\nfloat tmp42 = 0;\ntmp42 = v[(((m)) * (H42)) + H81 - (1)];\nfloat tmp43 = 0;\ntmp43 = v[(((m)) * (H42)) + H81];\ntmp41 = tmp42 + tmp43;\nfloat tmp44 = 0;\ntmp44 = v[(((m)) * (H42)) + H81 + 1];\ntmp40 = tmp41 + tmp44;\ntmp34 = tmp35 + tmp40;\nfloat tmp45 = 0;\nfloat tmp46 = 0;\nfloat tmp47 = 0;\ntmp47 = v[(((m)) * (H42 + 1)) + H81 - (1)];\nfloat tmp48 = 0;\ntmp48 = v[(((m)) * (H42 + 1)) + H81];\ntmp46 = tmp47 + tmp48;\nfloat tmp49 = 0;\ntmp49 = v[(((m)) * (H42 + 1)) + H81 + 1];\ntmp45 = tmp46 + tmp49;\noutput[((((1 + (m - 1) - (1)) + m - (m - (1))))) * ((H42 - (1))) + (H81 - (1)) + (1) * (m) + (1)] = tmp34 + tmp45;\n}\nfor (int H117 = m - (1); H117 < m; H117++) {\nfloat tmp50 = 0;\nfloat tmp51 = 0;\nfloat tmp52 = 0;\nfloat tmp53 = 0;\nfloat tmp54 = 0;\ntmp54 = v[(((m)) * (H42 - (1))) + H117 - (1)];\nfloat tmp55 = 0;\ntmp55 = v[(((m)) * (H42 - (1))) + H117];\ntmp53 = tmp54 + tmp55;\nfloat tmp56 = 0;\nif (H117 + 1 < m) {\ntmp56 = v[(((m)) * (H42 - (1))) + H117 + 1];\n}\ntmp52 = tmp53 + tmp56;\nfloat tmp57 = 0;\nfloat tmp58 = 0;\nfloat tmp59 = 0;\ntmp59 = v[(((m)) * (H42)) + H117 - (1)];\nfloat tmp60 = 0;\ntmp60 = v[(((m)) * (H42)) + H117];\ntmp58 = tmp59 + tmp60;\nfloat tmp61 = 0;\nif (H117 + 1 < m) {\ntmp61 = v[(((m)) * (H42)) + H117 + 1];\n}\ntmp57 = tmp58 + tmp61;\ntmp51 = tmp52 + tmp57;\nfloat tmp62 = 0;\nfloat tmp63 = 0;\ntmp63 = v[(((m)) * (H42 + 1)) + H117 - (1)];\nfloat tmp64 = 0;\ntmp64 = v[(((m)) * (H42 + 1)) + H117];\ntmp62 = tmp63 + tmp64;\ntmp50 = tmp51 + tmp62;\nfloat tmp65 = 0;\nif (H117 + 1 < m) {\ntmp65 = v[(((m)) * (H42 + 1)) + H117 + 1];\n}\noutput[((((1 + (m - 1) - (1)) + m - (m - (1))))) * ((H42 - (1))) + (H117 - (m - (1))) + (1) * (m) + ((1 + (m - 1) - (1)))] = tmp50 + tmp65;\n}\n}\nfor (int H153 = n - (1); H153 < n; H153++) {\nfor (int H154 = 0; H154 < m; H154++) {\nfloat tmp66 = 0;\nfloat tmp67 = 0;\nfloat tmp68 = 0;\nfloat tmp69 = 0;\nif (0 <= H154 - (1)) {\ntmp69 = v[(((m)) * (H153 - (1))) + H154 - (1)];\n}\nfloat tmp70 = 0;\ntmp70 = v[(((m)) * (H153 - (1))) + H154];\ntmp68 = tmp69 + tmp70;\nfloat tmp71 = 0;\nif (H154 + 1 < m) {\ntmp71 = v[(((m)) * (H153 - (1))) + H154 + 1];\n}\ntmp67 = tmp68 + tmp71;\nfloat tmp72 = 0;\nfloat tmp73 = 0;\nfloat tmp74 = 0;\nif (0 <= H154 - (1)) {\ntmp74 = v[(((m)) * (H153)) + H154 - (1)];\n}\nfloat tmp75 = 0;\ntmp75 = v[(((m)) * (H153)) + H154];\ntmp73 = tmp74 + tmp75;\nfloat tmp76 = 0;\nif (H154 + 1 < m) {\ntmp76 = v[(((m)) * (H153)) + H154 + 1];\n}\ntmp72 = tmp73 + tmp76;\ntmp66 = tmp67 + tmp72;\nfloat tmp77 = 0;\nif (H153 + 1 < n) {\nfloat tmp78 = 0;\nfloat tmp79 = 0;\nif (0 <= H154 - (1)) {\ntmp79 = v[(((m)) * (H153 + 1)) + H154 - (1)];\n}\nfloat tmp80 = 0;\ntmp80 = v[(((m)) * (H153 + 1)) + H154];\ntmp78 = tmp79 + tmp80;\nfloat tmp81 = 0;\nif (H154 + 1 < m) {\ntmp81 = v[(((m)) * (H153 + 1)) + H154 + 1];\n}\ntmp77 = tmp78 + tmp81;\n}\noutput[(m) * ((H153 - (n - (1)))) + H154 + ((1 + (n - 1) - (1))) * (m)] = tmp66 + tmp77;\n}\n}\n}\n"
"!!!\nblurtwopart.h\n#include <stdlib.h>\n\nvoid blurtwopart(float* v,int M,int N,float*output);\n!!!\nblurtwopart.c\n#include <stdlib.h>\n#include @blurtwopart.h@\n\nvoid blurtwopart(float* v,int M,int N,float*output){\nfloat* tmp2 = (float*) aligned_alloc(4,(((1 + (N + 1) - (1)) + N + 2 - (N + 1))) * (M) * sizeof (float));\nfor (int H6 = 0; H6 < 1; H6++) {\nfor (int H7 = 0; H7 < M; H7++) {\ntmp2[(M) * (H6) + H7] = 0;\n}\n}\nfor (int H9 = 1; H9 < (N + 1); H9++) {\nfor (int H12 = 0; H12 < 1; H12++) {\nfloat tmp3 = 0;\ntmp3 = v[(((M)) * (H9 - (1))) + H12];\nfloat tmp4 = 0;\ntmp4 = v[(((M)) * (H9 - (1))) + H12 + 1];\ntmp2[((((1 + (M - 1) - (1)) + M - (M - (1))))) * ((H9 - (1))) + H12 + (1) * (M)] = tmp3 + tmp4;\n}\nfor (int H20 = 1; H20 < (M - 1); H20++) {\nfloat tmp5 = 0;\nfloat tmp6 = 0;\ntmp6 = v[(((M)) * (H9 - (1))) + H20 - (1)];\nfloat tmp7 = 0;\ntmp7 = v[(((M)) * (H9 - (1))) + H20];\ntmp5 = tmp6 + tmp7;\nfloat tmp8 = 0;\ntmp8 = v[(((M)) * (H9 - (1))) + H20 + 1];\ntmp2[((((1 + (M - 1) - (1)) + M - (M - (1))))) * ((H9 - (1))) + (H20 - (1)) + (1) * (M) + (1)] = tmp5 + tmp8;\n}\nfor (int H32 = M - (1); H32 < M; H32++) {\nfloat tmp9 = 0;\ntmp9 = v[(((M)) * (H9 - (1))) + H32 - (1)];\nfloat tmp10 = 0;\ntmp10 = v[(((M)) * (H9 - (1))) + H32];\ntmp2[((((1 + (M - 1) - (1)) + M - (M - (1))))) * ((H9 - (1))) + (H32 - (M - (1))) + (1) * (M) + ((1 + (M - 1) - (1)))] = tmp9 + tmp10;\n}\n}\nfor (int H40 = N + 1; H40 < N + 2; H40++) {\nfor (int H41 = 0; H41 < M; H41++) {\ntmp2[(M) * ((H40 - (N + 1))) + H41 + ((1 + (N + 1) - (1))) * (M)] = 0;\n}\n}\nfloat* x = tmp2;\nfor (int H43 = 0; H43 < N; H43++) {\nfor (int H44 = 0; H44 < M; H44++) {\nfloat tmp11 = 0;\nfloat tmp12 = 0;\ntmp12 = x[(((M)) * (H43)) + H44];\nfloat tmp13 = 0;\ntmp13 = x[(((M)) * (H43 + 1)) + H44];\ntmp11 = tmp12 + tmp13;\nfloat tmp14 = 0;\ntmp14 = x[(((M)) * (H43 + 2)) + H44];\noutput[(M) * (H43) + H44] = tmp11 + tmp14;\n}\n}\nfree(tmp2);\n}\n"
